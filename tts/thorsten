#!/bin/bash

eval "$(conda shell.bash hook)"
conda activate tts

output_path="/tmp/tts_output.wav"
input_file=""
play_audio=1
from=""
to=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--to)
            to="$2"
            shift 2
        ;;
        -f|--from)
            from="$2"
            shift 2
        ;;
        --help)
            echo "Usage: thorsten [-f|--from <from>] [-t|--to <to>] [--help]"
            echo "Synthesize text to speech using the Thorsten Voice."
            echo "Options:"
            echo "  -f, --from <from>  Read text from this file. If not specified, read from standard input."
            echo "  -t, --to <to>     Write output to this file. If not specified, write to /tmp/tts_output.wav and play the audio."
            echo "  --help             Show this help message and exit."
            exit 0
        ;;
        *)
            text="$1"
            shift
        ;;
    esac
done

# Read input from stdin if no text input is provided and if the shell is interactive
if [[ -z $text ]]; then
    if read -t 0; then
        read -r text
    else
        text=""
    fi
fi

# If 'from' is specified, read the text from the file
if [[ -n $from ]]; then
    text=$(cat $from)
fi

# If no text or 'from' is specified, read from stdin
if [[ -z $text && -z $from ]]; then
    IFS= read -d '' -r text
fi

# If 'to' is not specified, set it to the default output path and set play_audio to 1
if [[ -z $to ]]; then
    to=$output_path
    play_audio=1
else
    play_audio=0
fi

# Use the filtered text as the input to the model
tts --model_name tts_models/de/thorsten/tacotron2-DDC --text "$filtered_text" --out_path $to

# If the tts command is successful and play_audio is 1, play the audio
if [[ $? -eq 0 && $play_audio -eq 1 ]]; then
    afplay --rate 1.25 $to
fi